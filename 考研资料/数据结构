# 一、概述

## 1 数据结构的基本概念

### 概念

数据：对客观事物的**符号表示**，在计算机科学中指所有能输入到计算机中并被计算机程序处理的符号的总称。

数据元素：数据的**基本单位**。一个数据元素可由若干个数据项组成。**数据项**是数据不可分割的最小单位。

数据对象：性质相同的数据元素的集合，是数据的一个子集。

数据结构：相互存在的一种或多种特定关系的数据元素的集合。数据元素相互之间的关系称为结构。

​	四种基本的数据结构：

​		集合：结构中的数据元素只有**“从属于一个集合”**的关系

​		线性结构：结构中的数据元素存在**一个对一个**的关系

​		树形结构：结构中的数据元素存在**一个对多个**的关系

​		图：结构中存在**多个对多个**的关系

数据结构的形式定义为一个二元组：
$$
Data\_Structure = (D,S)
$$
D是数据元素的有限集，S是D上关系的有限集。

逻辑结构：描述数据元素之间的逻辑关系。

物理结构：在计算机中的表示（映像）。

​		顺序映像 => 顺序存储结构

​		非顺序映像 => 链式存储结构 

数据类型：一个值的集合和定义在这个值集上的一组操作的总称。

## 2 算法的基本特征

### 算法

定义：对特定问题求解步骤的一种描述，是指令的有限序列，其中每一条指令表示一个或多个操作。

特性：

1. 有穷性 

   一个算法必须总是在执行有穷步之后结束，且每一步都可在有穷时间内完成。

2. 确定性

   算法中的每一条指令都必须有确切的含义，读者理解不产生二义性。在任何条件下，算法只有惟一一条执行路径。=>即对相同的输入只能得出相同的输出。

3. 可行性

   一个算法是能行的，即算法中描述的操作都是可以通过已经实现的基本运算执行有限次来完成的。

4. 输入

   一个算法有**零个或多个**输入。

5. 输出

   一个算法有**一个或多个**输出。

设计要求：

1. 正确性

2. 可读性

3. 健壮性

   当输入数据非法时，算法也能够适当地做出反应或进行处理，而不会产生错莫名其妙的输出结果。

4. 效率与地存储需求。

## 3 计算语句频度、估算算法的时间复杂度和空间复杂度的方法

### 算法效率的度量

一般情况下，算法中基本操作重复执行的次数是问题规模n的某个函数f(n)，算法的时间度量记作
$$
T(n)=O(f(n))
$$
表示随问题规模的增大，算法的执行时间的增长率和f(n)的增长率相同，称作算法的**渐进时间复杂度**，简称为时间复杂度。

语句的频度指该语句的重复执行的次数。

## 4 抽象数据类型

### 抽象数据类型

简称ADT，指一个数学模型以及定义在该模型上的一组操作。抽象数据类型用三元组表示：
$$
(D,S,P)
$$
其中D是数据对象，S是D上的关系集，P是对D的基本操作集。如：

```c
ADT抽象数据类型名{
	数据对象：<数据对象的定义>
	数据关系：<数据关系的定义>
	基本操作：<基本操作的定义>
}ADT抽象数据类型名
```

# 二、线性表

## 1 线性表的逻辑结构

### 定义

线性结构的特点：①存在惟一的一个被称作**”第一个“**的数据元素，②存在唯一的被称作**”最后一个“**的数据元素，③除第一个之外，集合中的每个数据元素均只有一个前驱，④除最后一个之外，每个数据元素均只有一个后继。

线性表： n个数据元素的有限序列。

线性表中的一个数据元素可以由若干个数据项组成，在这种情况下，常把数据元素称作记录，含有大量记录的的线性表又称文件。

线性表中的元素的个数定义为线性表的长度。

### 线性表的合并算法

```c
void MergeList(List La,List Lb,List &Lc){
    // 已知线性表La和Lb中的数据元素按值非递减排列
    // 归并La和Lb得到新的线性表Lc，Lc的数据元素也按值非递减排列
    InitList(Lc);
    i=j=1; k=0;
    La_len = ListLength(La); Lb_len = ListLength(Lb);
    while((i <= La_len) && (j<=Lb_len)){ // La与Lb非空
        GetElem(La,i,ai); GetElem(Lb,j,bj);
        if(ai <= bj){
            ListInsert(Lc,++k,ai);
            ++i;
        }
    }
    while(i<=La_len){
        GetElem(La,i++,ai);
        ListInsert(Lc,++k,ai);
    }
    while(j<=Lb_len){
        GetElem(Lb,j++,bi);
        ListInsert(Lc,++k,bj);
    }
}
```

## 2 线性表的顺序表示和实现

### 插入算法

一般情况，在第i个元素之前插入一个元素，需将第n至第i（共n-i+1）个元素向后移动一个位置。

```c
Status ListInsert_Sq(SqList &L,int i,ElemType e){
    // 在顺序表L中第i个位置之前插入新元素e
    // i的合法值为1 <= i <= ListLength_Sq(L)+1
    if(i<1 || i>L.length+1)
        return error;
	if(L.length >= L.listsize){ // 存储空间已满，需重新分配
        newbase = (ElemType *)realloc(L.elem,(L.listsize+LISTINCREMENT)*sizeof(ElemType));
        if(!newbase)
            exit(OVERFLOW);
    	L.elem = newbase;
        L.listsize += LISTINCREMENT;
    }
    q = &(L.elem[i-1]);
    for(p=&(L.elem[L.length-1]),p>=q,--p){
        *(p+1) = *p; // 插入位置即之后的位置后移
    }
    *q = e;
    ++L.length;
    return OK;
}
```

### 删除算法

一般情况，删除第i个元素需要将从第i+1个元素到第n个元素（共n-i）个元素依次向前移动一个位置。

```c
Status ListDelete_Sq(SqList &L, int i,ElemType e) {
	// 在顺序表L中删除第i个元素，并返回其值
    if((i<1) || (1>L.length))
        return error
	p=&(L.elem([i-1]));
    e = *p;
    q = L.elem+L.length-1;
    for(++p;p<=q;++p)
        *(p-1)=*p;
    --L.length;
    return OK;
}
```

### 顺序表合并

```c
void MergeList_Sq(SqList La,SqList Lb,SqList Lc){
    // 已知顺序表La和Lb的元素按值的非递减序列排列
    // 归并La和Lb得到的Lc也按值非递减排列
    pa=La.elem;pb=Lb.elem;
    Lc.listsize=Lc.length=La.length+Lb.length;
    pc = Lc.elem = (ElemType*)malloc(Lc.listsize*sizeof(ElemType));
    if(!Lc.elem)
        exit(OVERFLOW);
	pa_last=La.elem+La.length-1;
    pb_last=Lb.elem+Lb.length-1;
    while(pa<=pa_last&&pb<=pb_last){
        if(*pa<=*pb){
            *pa++=*pa++;
        }else{
            *pc++=*pb++;
        }
    }
    while(pa<=pa_last)
        *pc++=*pa++;
    while(pb<=pb_last)
        *pc++=*pb++;
}
```

## 3 线性表的链式表示和实现

### 插入

```C
Status ListInsert_L(LinkList &L,int i,ElemType e){
    // 在带头结点的单链线性表L中第i个元素之前插入元素e
    p = L; j=0;
    while(p&&j<i-1){ // 找到第i-1个节点
        p=p->next;
        ++j;
    }
    if(!p||j>i-1){
        return ERROR;
    }
    s=(LinkList)malloc(sizeof(LNode)); // 分配新节点
    s->data=e;
    s->next=p->next;
    p->next=s; // 插入s
}
```

### 删除

```C
Status ListDelete_L(LinkList &L,int i,ElemType &e){
    p=L;j=0;
    while(p->next&&j<i-1){
        p=p->next;
        ++j;
    }
    if(!(p->next)||j>i-1){
        return ERROR;
    }
    q=p->next;
    p->next=q->next;
   	e=q->data;
}
```

### 合并

```C
void MergeList_L(LinkList &La,LinkList &Lb,LinkList &Lc){
    // 已知单链表La，Lb的元素按值非递减排列
    pa=La->next;pb=Lb->next;
    Lc=pc=La;
    while(pa&&pb){
        if(oa->data <= pb->data){
            pc->next=pa;
            pc=pa;
            pa=pa->next;
        }else{
            pc->next=pb;
            pc=pb;
            pb=pb->next;
        }
    }
    pc->next=pa?pa:pb;
    free(Lb);
}
```

### 循环链表

### 双向链表

## 4 一元多项式的表示和相加

### 相加 

```c
void AddPolyn(polynomial &Pa,polynomial &Pb){
    // 多项式加法：Pa = Pa+Pb 利用两个多项式的节点构成和多项式
    ha=GetHead(Pa); hb=GetHead(Pb);
    qa=NextPos(Pa,ha);qb=NextPos(Pb,hb); // 移动qa qb -》 ha hb的下一个节点
    while(qa&&qb){
        a=GetCurElem(qa); b=GetCurElem(qb);
        switch(*cmp(a,b)){
            case -1: // 多项式中PA当前节点的指数值小
                ha=qa;qa=NextPos(Pa,qa);break;
            case 0: // 两者的指数相等
                sum=a.coef+b.coef;
                if(sum!=0.0){	// 修改多项式PA中当前节点的系数值 
                    SetCurElem(qa,sum);
                    ha=qa;
                }else{ // 和为0，删除qa节点
                    DelFirst(ha,qa);FreeNode(qa);
                }
                DeLFirst(hb,qb);FreeNode(qb);
                // 移动qa qb
                qb=NextPos(Pb,hb);
                qa=NextPos(Pa,ha);
                break;
            case 1:  // 多项式中PB中当前结点的指数值较小
                DeLFirst(hb,pb);InsFirst(ha,qb);
                qb=NextPos(Pb,hb);ha=NextPos(Pa,ha);break;
        }// end switch
    }// end while
    if(!ListEmpty(Pb))
        Append(Pa,qb);
    FreeNode(hb);
}
```

# 三、栈和队列

## 1 栈和队列的特点

## 2 栈和队列的表示和实现

### 入栈

```c
Status Push(SqStack &S,SElemType e){
    // 插入元素e为新的栈顶元素
    if(S.top -S.base >= S.stacksize){
        // 栈满，追加存储空间
        S.base = (SElemType *)realloc(S.base,S.stacksize+STACKINCREMNET)*sizeof(SElemType));
    	if(!S.base){
            exit(OVERFLOW);
        }
        S.top=S.base+S.stacksize;
    	S.stacksize += STACKINCREMENT;
    }
    *S.top++ = e;
    return OK;
}
```

### 出栈

```c
Status Pop(SqStack &S,SElemType &e){
    // 若栈不空，则删除S的栈顶元素，用e返回
    if(S.top == S.base)
        return ERROR;
    e=* --S.top;
    return OK;
}
```

### 入队

```c
Status EnQueue(LinkQueue &Q,QElemType e){
    // 插入元素为Q的新的队尾元素
    p = (QueuePtr)malloc(sizeof(QNode));
    if(!p)
        exit(OVERFLOW)
    p->data=e;
    p->next=NULL;
    Q.rear->next = p;
    Q.rear = p;
    return OK;
}
```

### 出队

```c
Status DeQueue(LinkQueue &Q,QElemType &e){
    // 若队列不空，则删除Q的队头元素，用e返回其值，并返回OK
    if(Q.front==Q.rear){
        return ERROR;
    }
    p=Q.front->next;
    e=p->data;
    Q.front->next = p->next;
    if(Q.rear==p){ // p是最后一个元素，队尾指针也被删除，需要对队尾指针重新赋值
        Q.rear=Q.front;
    }
    free(p);
    retrun OK;
}
```

### 循环队列 - 队列的顺序表示和实现

#### 入队

```c
Status EnQueue(SqQueue &Q,QElemType e){
    // 插入元素e为Q的新的队尾元素
    if((Q.rear+1)*MAXSIZE == Q.front) // 队列满
        return error;
    Q.base[Q.rear]=e;
    Q.rear=(Q.rear+1)%MAXQSIZE;
    return OK;
}
```

#### 出队

```c
Status DeQueue(SqQueue &Q,QElemType &e){
    // 若队列不为空，则删除Q的队头元素，用e返回其值，并返回OK
    if(Q.front == Q.rear)
        return error;
    e=Q.base[Q.front];
    Q.front=(Q.front+1)%MAXQSIZE;
    return OK;
}
```

## 3 栈和递归的实现

### 汉诺塔问题



## 4 使用栈和队列解决问题

### 栈的应用

> 数制转换



> 括号匹配检验



> 行编辑程序



> 迷宫求解



> 表达式求值

### 队列的应用

> 离散事件的模拟